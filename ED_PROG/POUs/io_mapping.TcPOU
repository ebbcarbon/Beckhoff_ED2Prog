<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="io_mapping" Id="{87c33c1f-405d-4536-940a-0d0026912d98}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM io_mapping
VAR PERSISTENT
//---Field Instrumentation-----------------------------------------------------------------------------------------------
    //Analog input function block
	cpt_3144: analog_scaling;
	
	lt_3102 : analog_scaling;
	lt_3202 : analog_scaling;
	lt_3302 : analog_scaling;
	lt_3153 : analog_scaling;
	lt_3253 : analog_scaling;
	lt_3353 : analog_scaling;
	lt_3402 : analog_scaling;
	
    pt_3119 : analog_scaling;
	pt_3219 : analog_scaling;
	pt_3319 : analog_scaling;
	pt_3141 : analog_scaling;
	pt_3241 : analog_scaling;
	pt_3341 : analog_scaling;
	pt_3428 : analog_scaling;
	pt_3414 : analog_scaling;
	
	tt_3118 : analog_scaling;
	tt_3218 : analog_scaling;
	tt_3318 : analog_scaling;
	tt_3140 : analog_scaling;
	tt_3240 : analog_scaling;
	tt_3340 : analog_scaling;
	tt_3432 : analog_scaling;

    //Analog input raw input, mapped to a physical input
    cpt_3144_raw_input AT %I* : INT;
	
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 14 (EL3058)^AI Standard Channel 1^Value'}
	pt_3119_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 14 (EL3058)^AI Standard Channel 2^Value'}
	pt_3219_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 14 (EL3058)^AI Standard Channel 3^Value'}
	pt_3319_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 14 (EL3058)^AI Standard Channel 4^Value'}
	pt_3141_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 14 (EL3058)^AI Standard Channel 5^Value'}
	pt_3241_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 14 (EL3058)^AI Standard Channel 6^Value'}
	pt_3341_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 25 (EK1100-0018)^Term 26 (EL3058)^AI Standard Channel 4^Value'}
	pt_3428_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 25 (EK1100-0018)^Term 26 (EL3058)^AI Standard Channel 5^Value'}
	pt_3414_raw_input AT %I* : INT;
	
	lt_3102_raw_input AT %I* : INT;
	lt_3202_raw_input AT %I* : INT;
	lt_3302_raw_input AT %I* : INT;
	lt_3153_raw_input AT %I* : INT;
	lt_3253_raw_input AT %I* : INT;
	lt_3353_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 25 (EK1100-0018)^Term 26 (EL3058)^AI Standard Channel 3^Value'}
	lt_3402_raw_input AT %I* : INT;
	
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 14 (EL3058)^AI Standard Channel 7^Value'}
	tt_3118_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 14 (EL3058)^AI Standard Channel 8^Value'}
	tt_3218_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 15 (EL3058)^AI Standard Channel 1^Value'}
	tt_3318_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 15 (EL3058)^AI Standard Channel 2^Value'}
	tt_3140_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 15 (EL3058)^AI Standard Channel 3^Value'}
	tt_3240_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 13 (EK1100-0018)^Term 15 (EL3058)^AI Standard Channel 4^Value'}
	tt_3340_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 25 (EK1100-0018)^Term 26 (EL3058)^AI Standard Channel 2^Value'}
	tt_3432_raw_input AT %I* : INT;
	
//---Field Equipment:Pumps----------------------------------------------------------------------------------------------------------
	
	//Motor vfd run feedback, mapped to a physical input
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 2^Input'}
	u_3112_run_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 4^Input'}
	u_3212_run_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 6^Input'}
	u_3312_run_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 8^Input'}
	u_3160_run_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 2^Input'}
	u_3260_run_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 4^Input'}
	u_3360_run_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 6^Input'}
	u_3370_run_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 25 (EK1100)^Term 28 (EL1859)^Channel 2^Input'}
	u_3405_run_feedback AT %I* : BOOL;
	
	//Motor Fault feedback
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 1^Input'}
	u_3112_fault_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 3^Input'}
	u_3212_fault_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 5^Input'}
	u_3312_fault_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 7^Input'}
	u_3160_fault_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 1^Input'}
	u_3260_fault_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 3^Input'}
	u_3360_fault_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 5^Input'}
	u_3370_fault_feedback AT %I* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 25 (EK1100)^Term 28 (EL1859)^Channel 1^Input'}
	u_3405_fault_feedback AT %I* : BOOL;
	
	
	//Motor vfd speed command function block
	u_3112_speed_command : analog_scaling;
	u_3212_speed_command : analog_scaling;
	u_3312_speed_command : analog_scaling;
	u_3160_speed_command : analog_scaling;
	u_3260_speed_command : analog_scaling;
	u_3360_speed_command : analog_scaling;
	u_3370_speed_command : analog_scaling;
	u_3405_speed_command : analog_scaling;
	
	//Motor vfd speed command scaled output, mappped to a physical output
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 4 (EL4124)^AO Output Channel 1^Analog output'}
	u_3112_speed_command_io AT %Q* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 4 (EL4124)^AO Output Channel 3^Analog output'}
	u_3212_speed_command_io AT %Q* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 4 (EL4124)^AO Output Channel 5^Analog output'}
	u_3312_speed_command_io AT %Q* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 4 (EL4124)^AO Output Channel 7^Analog output'}
	u_3160_speed_command_io AT %Q* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 5 (EL4124)^AO Output Channel 1^Analog output'}
	u_3260_speed_command_io AT %Q* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 5 (EL4124)^AO Output Channel 3^Analog output'}
	u_3360_speed_command_io AT %Q* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 5 (EL4124)^AO Output Channel 5^Analog output'}
	u_3370_speed_command_io AT %Q* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 25 (EK1100)^Term 27 (EL4124)^AO Output Channel 1^Analog output'}
	u_3405_speed_command_io AT %Q* : INT;
	
	//Motor vfd run command, mapped to a physical output
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 9^Output'}
	u_3112_run_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 11^Output'}
	u_3212_run_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 13^Output'}
	u_3312_run_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 15^Output'}	
	u_3160_run_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 9^Output'}
	u_3260_run_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 11^Output'}
	u_3360_run_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 13^Output'}
	u_3370_run_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 4 (EtherCAT)^Term 25 (EK1100)^Term 28 (EL1859)^Channel 9^Output'}
	u_3405_run_command_io AT %Q* : BOOL;
	
	//Motor Fault Reset
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 10^Output'}
	u_3112_fault_reset_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 12^Output'}
	u_3212_fault_reset_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 14^Output'}
	u_3312_fault_reset_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 7 (EL1859)^Channel 16^Output'}
	u_3160_fault_reset_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 10^Output'}
	u_3260_fault_reset_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 12^Output'}
	u_3360_fault_reset_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 8 (EL1859)^Channel 14^Output'}
	u_3370_fault_reset_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' :=  'TIID^Device 4 (EtherCAT)^Term 25 (EK1100)^Term 28 (EL1859)^Channel 10^Output'}
	u_3405_fault_reset_io AT %Q* : BOOL;
	
	//Motor vfd speed feedback
	u_3112_speed_feedback : analog_scaling;
	u_3212_speed_feedback : analog_scaling;
	u_3312_speed_feedback : analog_scaling;
	u_3160_speed_feedback : analog_scaling;
	u_3260_speed_feedback : analog_scaling;
	u_3360_speed_feedback : analog_scaling;
	u_3370_speed_feedback : analog_scaling;
	u_3405_speed_feedback : analog_scaling;
	
	//Motor vfd speed feedback raw input
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EL3058)^AI Standard Channel 1^Value'}
	u_3112_speed_feedback_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EL3058)^AI Standard Channel 2^Value'}
	u_3212_speed_feedback_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EL3058)^AI Standard Channel 3^Value'}
	u_3312_speed_feedback_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EL3058)^AI Standard Channel 4^Value'}
	u_3160_speed_feedback_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EL3058)^AI Standard Channel 5^Value'}
	u_3260_speed_feedback_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EL3058)^AI Standard Channel 6^Value'}
	u_3360_speed_feedback_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EL3058)^AI Standard Channel 7^Value'}
	u_3370_speed_feedback_raw_input AT %I* : INT;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 25 (EK1100)^Term 26 (EL3058)^AI Standard Channel 1^Value'}
	u_3405_speed_feedback_raw_input AT %I* : INT;
	
//--Field Equipent: Valves---------------------------------------------------------------------------------------------------------------
	
	//Analog valve position feedback
	av_3148_position_feedback : analog_scaling;
	av_3248_position_feedback : analog_scaling;
	av_3348_position_feedback : analog_scaling;
	//Analog valve position feedback raw input
	av_3148_position_feedback_raw_input AT %I* : INT;
	av_3248_position_feedback_raw_input AT %I* : INT;
	av_3348_position_feedback_raw_input AT %I* : INT;
	
	//Analog valve position command
	av_3148_position_command : analog_scaling;
	av_3248_position_command : analog_scaling;
	av_3348_position_command : analog_scaling;
	//Analog valve position command output valve
	av_3148_position_command_io AT %Q* : INT;
	av_3248_position_command_io AT %Q* : INT;
	av_3348_position_command_io AT %Q* : INT;
	
	//Example digital valve open feedback
	nv_3110_open_feedback AT %I* : BOOL;
	nv_3210_open_feedback AT %I* : BOOL;
	nv_3310_open_feedback AT %I* : BOOL;
	nv_3135_open_feedback AT %I* : BOOL;
	nv_3235_open_feedback AT %I* : BOOL;
	nv_3335_open_feedback AT %I* : BOOL;
	nv_3372_open_feedback AT %I* : BOOL;
	nv_3162_open_feedback AT %I* : BOOL;
	
	//Example digital valve closed feedback
	nv_3110_closed_feedback AT %I* : BOOL;
	nv_3210_closed_feedback AT %I* : BOOL;
	nv_3310_closed_feedback AT %I* : BOOL;
	nv_3135_closed_feedback AT %I* : BOOL;
	nv_3235_closed_feedback AT %I* : BOOL;
	nv_3335_closed_feedback AT %I* : BOOL;
	nv_3372_closed_feedback AT %I* : BOOL;
	nv_3162_closed_feedback AT %I* : BOOL;
	
	//Example digital valve open command
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 21 (EK1914)^Term 22 (EL1859)^Channel 11^Output'}
	nv_3110_open_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 21 (EK1914)^Term 22 (EL1859)^Channel 10^Output'}
	nv_3210_open_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 21 (EK1914)^Term 22 (EL1859)^Channel 13^Output'}
	nv_3310_open_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 21 (EK1914)^Term 22 (EL1859)^Channel 12^Output'}
	nv_3135_open_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 21 (EK1914)^Term 22 (EL1859)^Channel 14^Output'}
	nv_3235_open_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 21 (EK1914)^Term 22 (EL1859)^Channel 15^Output'}
	nv_3335_open_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 21 (EK1914)^Term 22 (EL1859)^Channel 16^Output'}
	nv_3372_open_command_io AT %Q* : BOOL;
	{attribute 'TcLinkTo' := 'TIID^Device 4 (EtherCAT)^Term 21 (EK1914)^Term 22 (EL1859)^Channel 9^Output'}
	nv_3162_open_command_io AT %Q* : BOOL;
	
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//---Field Instrumentation

//Instantiate analog input function block
cpt_3144();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
cpt_3144.eu_max:=opc.popa_0081_cpt_3144_eu_max;
cpt_3144.eu_min:=opc.popa_0081_cpt_3144_eu_min;
cpt_3144.filter_factor:=opc.popa_0081_cpt_3144_filter_factor;
cpt_3144.raw_max:=opc.popa_0081_cpt_3144_raw_max;
cpt_3144.raw_min:=opc.popa_0081_cpt_3144_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
cpt_3144.raw_input := cpt_3144_raw_input;

//Instantiate analog input function block
lt_3102();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
lt_3102.eu_max:=opc.popa_0081_lt_3102_eu_max;
lt_3102.eu_min:=opc.popa_0081_lt_3102_eu_min;
lt_3102.filter_factor:=opc.popa_0081_lt_3102_filter_factor;
lt_3102.raw_max:=opc.popa_0081_lt_3102_raw_max;
lt_3102.raw_min:=opc.popa_0081_lt_3102_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
lt_3102.raw_input := lt_3102_raw_input;

//Instantiate analog input function block
lt_3202();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
lt_3202.eu_max:=opc.popa_0081_lt_3202_eu_max;
lt_3202.eu_min:=opc.popa_0081_lt_3202_eu_min;
lt_3202.filter_factor:=opc.popa_0081_lt_3202_filter_factor;
lt_3202.raw_max:=opc.popa_0081_lt_3202_raw_max;
lt_3202.raw_min:=opc.popa_0081_lt_3202_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
lt_3202.raw_input := lt_3202_raw_input;

//Instantiate analog input function block
lt_3302();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
lt_3302.eu_max:=opc.popa_0081_lt_3302_eu_max;
lt_3302.eu_min:=opc.popa_0081_lt_3302_eu_min;
lt_3302.filter_factor:=opc.popa_0081_lt_3302_filter_factor;
lt_3302.raw_max:=opc.popa_0081_lt_3302_raw_max;
lt_3302.raw_min:=opc.popa_0081_lt_3302_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
lt_3302.raw_input := lt_3302_raw_input;

//Instantiate analog input function block
lt_3153();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
lt_3153.eu_max:=opc.popa_0081_lt_3153_eu_max;
lt_3153.eu_min:=opc.popa_0081_lt_3153_eu_min;
lt_3153.filter_factor:=opc.popa_0081_lt_3153_filter_factor;
lt_3153.raw_max:=opc.popa_0081_lt_3153_raw_max;
lt_3153.raw_min:=opc.popa_0081_lt_3153_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
lt_3153.raw_input := lt_3153_raw_input;

//Instantiate analog input function block
lt_3253();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
lt_3253.eu_max:=opc.popa_0081_lt_3253_eu_max;
lt_3253.eu_min:=opc.popa_0081_lt_3253_eu_min;
lt_3253.filter_factor:=opc.popa_0081_lt_3253_filter_factor;
lt_3253.raw_max:=opc.popa_0081_lt_3253_raw_max;
lt_3253.raw_min:=opc.popa_0081_lt_3253_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
lt_3253.raw_input := lt_3253_raw_input;

//Instantiate analog input function block
lt_3353();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
lt_3353.eu_max:=opc.popa_0081_lt_3353_eu_max;
lt_3353.eu_min:=opc.popa_0081_lt_3353_eu_min;
lt_3353.filter_factor:=opc.popa_0081_lt_3353_filter_factor;
lt_3353.raw_max:=opc.popa_0081_lt_3353_raw_max;
lt_3353.raw_min:=opc.popa_0081_lt_3353_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
lt_3353.raw_input := lt_3353_raw_input;

//Instantiate analog input function block
lt_3402();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
lt_3402.eu_max:=opc.popa_0081_lt_3402_eu_max;
lt_3402.eu_min:=opc.popa_0081_lt_3402_eu_min;
lt_3402.filter_factor:=opc.popa_0081_lt_3402_filter_factor;
lt_3402.raw_max:=opc.popa_0081_lt_3402_raw_max;
lt_3402.raw_min:=opc.popa_0081_lt_3402_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
lt_3402.raw_input := lt_3402_raw_input;

//Instantiate analog input function block
pt_3119();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
pt_3119.eu_max:=opc.popa_0081_pt_3119_eu_max;
pt_3119.eu_min:=opc.popa_0081_pt_3119_eu_min;
pt_3119.filter_factor:=opc.popa_0081_pt_3119_filter_factor;
pt_3119.raw_max:=opc.popa_0081_pt_3119_raw_max;
pt_3119.raw_min:=opc.popa_0081_pt_3119_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
pt_3119.raw_input := pt_3119_raw_input;

//Instantiate analog input function block
pt_3219();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
pt_3219.eu_max:=opc.popa_0081_pt_3219_eu_max;
pt_3219.eu_min:=opc.popa_0081_pt_3219_eu_min;
pt_3219.filter_factor:=opc.popa_0081_pt_3219_filter_factor;
pt_3219.raw_max:=opc.popa_0081_pt_3219_raw_max;
pt_3219.raw_min:=opc.popa_0081_pt_3219_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
pt_3219.raw_input := pt_3219_raw_input;

//Instantiate analog input function block
pt_3319();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
pt_3319.eu_max:=opc.popa_0081_pt_3319_eu_max;
pt_3319.eu_min:=opc.popa_0081_pt_3319_eu_min;
pt_3319.filter_factor:=opc.popa_0081_pt_3319_filter_factor;
pt_3319.raw_max:=opc.popa_0081_pt_3319_raw_max;
pt_3319.raw_min:=opc.popa_0081_pt_3319_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
pt_3319.raw_input := pt_3319_raw_input;

//Instantiate analog input function block
pt_3141();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
pt_3141.eu_max:=opc.popa_0081_pt_3141_eu_max;
pt_3141.eu_min:=opc.popa_0081_pt_3141_eu_min;
pt_3141.filter_factor:=opc.popa_0081_pt_3141_filter_factor;
pt_3141.raw_max:=opc.popa_0081_pt_3141_raw_max;
pt_3141.raw_min:=opc.popa_0081_pt_3141_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
pt_3141.raw_input := pt_3141_raw_input;

//Instantiate analog input function block
pt_3241();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
pt_3241.eu_max:=opc.popa_0081_pt_3241_eu_max;
pt_3241.eu_min:=opc.popa_0081_pt_3241_eu_min;
pt_3241.filter_factor:=opc.popa_0081_pt_3241_filter_factor;
pt_3241.raw_max:=opc.popa_0081_pt_3241_raw_max;
pt_3241.raw_min:=opc.popa_0081_pt_3241_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
pt_3241.raw_input := pt_3241_raw_input;

//Instantiate analog input function block
pt_3341();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
pt_3341.eu_max:=opc.popa_0081_pt_3341_eu_max;
pt_3341.eu_min:=opc.popa_0081_pt_3341_eu_min;
pt_3341.filter_factor:=opc.popa_0081_pt_3341_filter_factor;
pt_3341.raw_max:=opc.popa_0081_pt_3341_raw_max;
pt_3341.raw_min:=opc.popa_0081_pt_3341_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
pt_3341.raw_input := pt_3341_raw_input;

//Instantiate analog input function block
pt_3428();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
pt_3428.eu_max:=opc.popa_0081_pt_3428_eu_max;
pt_3428.eu_min:=opc.popa_0081_pt_3428_eu_min;
pt_3428.filter_factor:=opc.popa_0081_pt_3428_filter_factor;
pt_3428.raw_max:=opc.popa_0081_pt_3428_raw_max;
pt_3428.raw_min:=opc.popa_0081_pt_3428_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
pt_3428.raw_input := pt_3428_raw_input;

//Instantiate analog input function block
pt_3414();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
pt_3414.eu_max:=opc.popa_0081_pt_3414_eu_max;
pt_3414.eu_min:=opc.popa_0081_pt_3414_eu_min;
pt_3414.filter_factor:=opc.popa_0081_pt_3414_filter_factor;
pt_3414.raw_max:=opc.popa_0081_pt_3414_raw_max;
pt_3414.raw_min:=opc.popa_0081_pt_3414_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
pt_3414.raw_input := pt_3414_raw_input;

//Instantiate analog input function block
tt_3118();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
tt_3118.eu_max:=opc.popa_0081_tt_3118_eu_max;
tt_3118.eu_min:=opc.popa_0081_tt_3118_eu_min;
tt_3118.filter_factor:=opc.popa_0081_tt_3118_filter_factor;
tt_3118.raw_max:=opc.popa_0081_tt_3118_raw_max;
tt_3118.raw_min:=opc.popa_0081_tt_3118_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
tt_3118.raw_input := tt_3118_raw_input;

//Instantiate analog input function block
tt_3218();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
tt_3218.eu_max:=opc.popa_0081_tt_3218_eu_max;
tt_3218.eu_min:=opc.popa_0081_tt_3218_eu_min;
tt_3218.filter_factor:=opc.popa_0081_tt_3218_filter_factor;
tt_3218.raw_max:=opc.popa_0081_tt_3218_raw_max;
tt_3218.raw_min:=opc.popa_0081_tt_3218_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
tt_3218.raw_input := tt_3218_raw_input;

//Instantiate analog input function block
tt_3318();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
tt_3318.eu_max:=opc.popa_0081_tt_3318_eu_max;
tt_3318.eu_min:=opc.popa_0081_tt_3318_eu_min;
tt_3318.filter_factor:=opc.popa_0081_tt_3318_filter_factor;
tt_3318.raw_max:=opc.popa_0081_tt_3318_raw_max;
tt_3318.raw_min:=opc.popa_0081_tt_3318_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
tt_3318.raw_input := tt_3318_raw_input;

//Instantiate analog input function block
tt_3140();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
tt_3140.eu_max:=opc.popa_0081_tt_3140_eu_max;
tt_3140.eu_min:=opc.popa_0081_tt_3140_eu_min;
tt_3140.filter_factor:=opc.popa_0081_tt_3140_filter_factor;
tt_3140.raw_max:=opc.popa_0081_tt_3140_raw_max;
tt_3140.raw_min:=opc.popa_0081_tt_3140_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
tt_3140.raw_input := tt_3140_raw_input;

//Instantiate analog input function block
tt_3240();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
tt_3240.eu_max:=opc.popa_0081_tt_3240_eu_max;
tt_3240.eu_min:=opc.popa_0081_tt_3240_eu_min;
tt_3240.filter_factor:=opc.popa_0081_tt_3240_filter_factor;
tt_3240.raw_max:=opc.popa_0081_tt_3240_raw_max;
tt_3240.raw_min:=opc.popa_0081_tt_3240_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
tt_3240.raw_input := tt_3240_raw_input;

//Instantiate analog input function block
tt_3340();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
tt_3340.eu_max:=opc.popa_0081_tt_3340_eu_max;
tt_3340.eu_min:=opc.popa_0081_tt_3340_eu_min;
tt_3340.filter_factor:=opc.popa_0081_tt_3340_filter_factor;
tt_3340.raw_max:=opc.popa_0081_tt_3340_raw_max;
tt_3340.raw_min:=opc.popa_0081_tt_3340_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
tt_3340.raw_input := tt_3340_raw_input;

//Instantiate analog input function block
tt_3432();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
tt_3432.eu_max:=opc.popa_0081_tt_3432_eu_max;
tt_3432.eu_min:=opc.popa_0081_tt_3432_eu_min;
tt_3432.filter_factor:=opc.popa_0081_tt_3432_filter_factor;
tt_3432.raw_max:=opc.popa_0081_tt_3432_raw_max;
tt_3432.raw_min:=opc.popa_0081_tt_3432_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
tt_3432.raw_input := tt_3432_raw_input;

//---Pumps---------------------------------------------------------------------------------------------------------------------------------

//Map the motor run command to the command output
u_3112_run_command_io:=motor_vfd_control_st.u_3112.run_command;
u_3212_run_command_io:=motor_vfd_control_st.u_3212.run_command;
u_3312_run_command_io:=motor_vfd_control_st.u_3312.run_command;
u_3160_run_command_io:=motor_vfd_control_st.u_3160.run_command;
u_3260_run_command_io:=motor_vfd_control_st.u_3260.run_command;
u_3360_run_command_io:=motor_vfd_control_st.u_3360.run_command;
u_3370_run_command_io:=motor_vfd_control_st.u_3370.run_command;
u_3405_run_command_io:=motor_vfd_control_st.u_3405.run_command;

//Instantiate u_3112 Speed command analog output function block
u_3112_speed_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3112_speed_command.eu_max:=opc.popa_0081_u_3112_speed_command_eu_max;
u_3112_speed_command.eu_min:=opc.popa_0081_u_3112_speed_command_eu_min;
u_3112_speed_command.filter_factor:=opc.popa_0081_u_3112_speed_command_filter_factor;
u_3112_speed_command.raw_max:=opc.popa_0081_u_3112_speed_command_raw_max;
u_3112_speed_command.raw_min:=opc.popa_0081_u_3112_speed_command_raw_min;

//Map output from motor control pou to scaling block
IF general.ed_routine_maint OR general.ed_routine_manual THEN
	u_3112_speed_command.raw_input := opc.popa_0081_u_3112_hmi_speed_request;
	ELSE
		u_3112_speed_command.raw_input:=motor_vfd_control_st.u_3112_pid.fCtrlOutput;
END_IF

//Map the analog scaling function block raw input to the physical raw output variable
u_3112_speed_command_io := REAL_TO_INT(u_3112_speed_command.scaled_value);

//Instantiate u_3112 speed feedback analog input function block
u_3112_speed_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3112_speed_feedback.eu_max:=opc.popa_0081_u_3112_speed_feedback_eu_max;
u_3112_speed_feedback.eu_min:=opc.popa_0081_u_3112_speed_feedback_eu_min;
u_3112_speed_feedback.filter_factor:=opc.popa_0081_u_3112_speed_feedback_filter_factor;
u_3112_speed_feedback.raw_max:=opc.popa_0081_u_3112_speed_feedback_raw_max;
u_3112_speed_feedback.raw_min:=opc.popa_0081_u_3112_speed_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
u_3112_speed_feedback.raw_input := u_3112_speed_feedback_raw_input;





//--------------------------------------------------------------------------------------------------------------
//Instantiate Example analog output function block
u_3212_speed_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3212_speed_command.eu_max:=opc.popa_0081_u_3212_speed_command_eu_max;
u_3212_speed_command.eu_min:=opc.popa_0081_u_3212_speed_command_eu_min;
u_3212_speed_command.filter_factor:=opc.popa_0081_u_3212_speed_command_filter_factor;
u_3212_speed_command.raw_max:=opc.popa_0081_u_3212_speed_command_raw_max;
u_3212_speed_command.raw_min:=opc.popa_0081_u_3212_speed_command_raw_min;

//Map output from motor control pou to scaling block
IF general.ed_routine_maint OR general.ed_routine_manual THEN
	u_3212_speed_command.raw_input := opc.popa_0081_u_3212_hmi_speed_request;
	ELSE
		u_3212_speed_command.raw_input:=motor_vfd_control_st.u_3212_pid.fCtrlOutput;
END_IF

//Map the analog scaling function block raw input to the physical raw output variable
u_3212_speed_command_io := REAL_TO_INT(u_3212_speed_command.scaled_value);

//Instantiate Example analog input function block
u_3212_speed_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3212_speed_feedback.eu_max:=opc.popa_0081_u_3212_speed_feedback_eu_max;
u_3212_speed_feedback.eu_min:=opc.popa_0081_u_3212_speed_feedback_eu_min;
u_3212_speed_feedback.filter_factor:=opc.popa_0081_u_3212_speed_feedback_filter_factor;
u_3212_speed_feedback.raw_max:=opc.popa_0081_u_3212_speed_feedback_raw_max;
u_3212_speed_feedback.raw_min:=opc.popa_0081_u_3212_speed_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
u_3212_speed_feedback.raw_input := u_3212_speed_feedback_raw_input;

//--------------------------------------------------------------------------------------------------------------
//Instantiate Example analog output function block
u_3312_speed_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3312_speed_command.eu_max:=opc.popa_0081_u_3312_speed_command_eu_max;
u_3312_speed_command.eu_min:=opc.popa_0081_u_3312_speed_command_eu_min;
u_3312_speed_command.filter_factor:=opc.popa_0081_u_3312_speed_command_filter_factor;
u_3312_speed_command.raw_max:=opc.popa_0081_u_3312_speed_command_raw_max;
u_3312_speed_command.raw_min:=opc.popa_0081_u_3312_speed_command_raw_min;

//Map output from motor control pou to scaling block
IF general.ed_routine_maint OR general.ed_routine_manual THEN
	u_3312_speed_command.raw_input := opc.popa_0081_u_3312_hmi_speed_request;
	ELSE
		u_3312_speed_command.raw_input:=motor_vfd_control_st.u_3312_pid.fCtrlOutput;
END_IF

//Map the analog scaling function block raw input to the physical raw output variable
u_3312_speed_command_io := REAL_TO_INT(u_3312_speed_command.scaled_value);

//Instantiate Example analog input function block
u_3312_speed_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3312_speed_feedback.eu_max:=opc.popa_0081_u_3312_speed_feedback_eu_max;
u_3312_speed_feedback.eu_min:=opc.popa_0081_u_3312_speed_feedback_eu_min;
u_3312_speed_feedback.filter_factor:=opc.popa_0081_u_3312_speed_feedback_filter_factor;
u_3312_speed_feedback.raw_max:=opc.popa_0081_u_3312_speed_feedback_raw_max;
u_3312_speed_feedback.raw_min:=opc.popa_0081_u_3312_speed_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
u_3312_speed_feedback.raw_input := u_3312_speed_feedback_raw_input;

//--------------------------------------------------------------------------------------------------------------
//Instantiate Example analog output function block
u_3160_speed_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3160_speed_command.eu_max:=opc.popa_0081_u_3160_speed_command_eu_max;
u_3160_speed_command.eu_min:=opc.popa_0081_u_3160_speed_command_eu_min;
u_3160_speed_command.filter_factor:=opc.popa_0081_u_3160_speed_command_filter_factor;
u_3160_speed_command.raw_max:=opc.popa_0081_u_3160_speed_command_raw_max;
u_3160_speed_command.raw_min:=opc.popa_0081_u_3160_speed_command_raw_min;

//Map output from motor control pou to scaling block
IF general.ed_routine_maint OR general.ed_routine_manual THEN
	u_3160_speed_command.raw_input := opc.popa_0081_u_3160_hmi_speed_request;
	ELSE
		u_3160_speed_command.raw_input:=motor_vfd_control_st.u_3160_pid.fCtrlOutput;
END_IF

//Map the analog scaling function block raw input to the physical raw output variable
u_3160_speed_command_io := REAL_TO_INT(u_3160_speed_command.scaled_value);

//Instantiate Example analog input function block
u_3160_speed_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3160_speed_feedback.eu_max:=opc.popa_0081_u_3160_speed_feedback_eu_max;
u_3160_speed_feedback.eu_min:=opc.popa_0081_u_3160_speed_feedback_eu_min;
u_3160_speed_feedback.filter_factor:=opc.popa_0081_u_3160_speed_feedback_filter_factor;
u_3160_speed_feedback.raw_max:=opc.popa_0081_u_3160_speed_feedback_raw_max;
u_3160_speed_feedback.raw_min:=opc.popa_0081_u_3160_speed_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
u_3160_speed_feedback.raw_input := u_3160_speed_feedback_raw_input;

//--------------------------------------------------------------------------------------------------------------
//Instantiate Example analog output function block
u_3260_speed_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3260_speed_command.eu_max:=opc.popa_0081_u_3260_speed_command_eu_max;
u_3260_speed_command.eu_min:=opc.popa_0081_u_3260_speed_command_eu_min;
u_3260_speed_command.filter_factor:=opc.popa_0081_u_3260_speed_command_filter_factor;
u_3260_speed_command.raw_max:=opc.popa_0081_u_3260_speed_command_raw_max;
u_3260_speed_command.raw_min:=opc.popa_0081_u_3260_speed_command_raw_min;

//Map output from motor control pou to scaling block
IF general.ed_routine_maint OR general.ed_routine_manual THEN
	u_3260_speed_command.raw_input := opc.popa_0081_u_3260_hmi_speed_request;
	ELSE
		u_3260_speed_command.raw_input:=motor_vfd_control_st.u_3260_pid.fCtrlOutput;
END_IF

//Map the analog scaling function block raw input to the physical raw output variable
u_3260_speed_command_io := REAL_TO_INT(u_3260_speed_command.scaled_value);

//Instantiate Example analog input function block
u_3260_speed_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3260_speed_feedback.eu_max:=opc.popa_0081_u_3260_speed_feedback_eu_max;
u_3260_speed_feedback.eu_min:=opc.popa_0081_u_3260_speed_feedback_eu_min;
u_3260_speed_feedback.filter_factor:=opc.popa_0081_u_3260_speed_feedback_filter_factor;
u_3260_speed_feedback.raw_max:=opc.popa_0081_u_3260_speed_feedback_raw_max;
u_3260_speed_feedback.raw_min:=opc.popa_0081_u_3260_speed_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
u_3260_speed_feedback.raw_input := u_3260_speed_feedback_raw_input;

//--------------------------------------------------------------------------------------------------------------
//Instantiate Example analog output function block
u_3360_speed_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3360_speed_command.eu_max:=opc.popa_0081_u_3360_speed_command_eu_max;
u_3360_speed_command.eu_min:=opc.popa_0081_u_3360_speed_command_eu_min;
u_3360_speed_command.filter_factor:=opc.popa_0081_u_3360_speed_command_filter_factor;
u_3360_speed_command.raw_max:=opc.popa_0081_u_3360_speed_command_raw_max;
u_3360_speed_command.raw_min:=opc.popa_0081_u_3360_speed_command_raw_min;

//Map output from motor control pou to scaling block
IF general.ed_routine_maint OR general.ed_routine_manual THEN
	u_3360_speed_command.raw_input := opc.popa_0081_u_3360_hmi_speed_request;
	ELSE
		u_3360_speed_command.raw_input:=motor_vfd_control_st.u_3360_pid.fCtrlOutput;
END_IF

//Map the analog scaling function block raw input to the physical raw output variable
u_3360_speed_command_io := REAL_TO_INT(u_3360_speed_command.scaled_value);

//Instantiate Example analog input function block
u_3360_speed_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3360_speed_feedback.eu_max:=opc.popa_0081_u_3360_speed_feedback_eu_max;
u_3360_speed_feedback.eu_min:=opc.popa_0081_u_3360_speed_feedback_eu_min;
u_3360_speed_feedback.filter_factor:=opc.popa_0081_u_3360_speed_feedback_filter_factor;
u_3360_speed_feedback.raw_max:=opc.popa_0081_u_3360_speed_feedback_raw_max;
u_3360_speed_feedback.raw_min:=opc.popa_0081_u_3360_speed_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
u_3360_speed_feedback.raw_input := u_3360_speed_feedback_raw_input;

//--------------------------------------------------------------------------------------------------------------
//Instantiate Example analog output function block
u_3370_speed_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3370_speed_command.eu_max:=opc.popa_0081_u_3370_speed_command_eu_max;
u_3370_speed_command.eu_min:=opc.popa_0081_u_3370_speed_command_eu_min;
u_3370_speed_command.filter_factor:=opc.popa_0081_u_3370_speed_command_filter_factor;
u_3370_speed_command.raw_max:=opc.popa_0081_u_3370_speed_command_raw_max;
u_3370_speed_command.raw_min:=opc.popa_0081_u_3370_speed_command_raw_min;

//Map output from motor control pou to scaling block
IF general.ed_routine_maint OR general.ed_routine_manual THEN
	u_3370_speed_command.raw_input := opc.popa_0081_u_3370_hmi_speed_request;
	ELSE
		u_3370_speed_command.raw_input:=motor_vfd_control_st.u_3370_pid.fCtrlOutput;
END_IF

//Map the analog scaling function block raw input to the physical raw output variable
u_3370_speed_command_io := REAL_TO_INT(u_3370_speed_command.scaled_value);

//Instantiate Example analog input function block
u_3370_speed_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3370_speed_feedback.eu_max:=opc.popa_0081_u_3370_speed_feedback_eu_max;
u_3370_speed_feedback.eu_min:=opc.popa_0081_u_3370_speed_feedback_eu_min;
u_3370_speed_feedback.filter_factor:=opc.popa_0081_u_3370_speed_feedback_filter_factor;
u_3370_speed_feedback.raw_max:=opc.popa_0081_u_3370_speed_feedback_raw_max;
u_3370_speed_feedback.raw_min:=opc.popa_0081_u_3370_speed_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
u_3370_speed_feedback.raw_input := u_3370_speed_feedback_raw_input;

//--------------------------------------------------------------------------------------------------------------
//Instantiate Example analog output function block
u_3405_speed_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3405_speed_command.eu_max:=opc.popa_0081_u_3405_speed_command_eu_max;
u_3405_speed_command.eu_min:=opc.popa_0081_u_3405_speed_command_eu_min;
u_3405_speed_command.filter_factor:=opc.popa_0081_u_3405_speed_command_filter_factor;
u_3405_speed_command.raw_max:=opc.popa_0081_u_3405_speed_command_raw_max;
u_3405_speed_command.raw_min:=opc.popa_0081_u_3405_speed_command_raw_min;

//Map output from motor control pou to scaling block
IF general.ed_routine_maint OR general.ed_routine_manual THEN
	u_3405_speed_command.raw_input := opc.popa_0081_u_3405_hmi_speed_request;
	ELSE
		u_3405_speed_command.raw_input:=motor_vfd_control_st.u_3405_pid.fCtrlOutput;
END_IF

//Map the analog scaling function block raw input to the physical raw output variable
u_3405_speed_command_io := REAL_TO_INT(u_3405_speed_command.scaled_value);

//Instantiate Example analog input function block
u_3405_speed_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
u_3405_speed_feedback.eu_max:=opc.popa_0081_u_3405_speed_feedback_eu_max;
u_3405_speed_feedback.eu_min:=opc.popa_0081_u_3405_speed_feedback_eu_min;
u_3405_speed_feedback.filter_factor:=opc.popa_0081_u_3405_speed_feedback_filter_factor;
u_3405_speed_feedback.raw_max:=opc.popa_0081_u_3405_speed_feedback_raw_max;
u_3405_speed_feedback.raw_min:=opc.popa_0081_u_3405_speed_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
u_3405_speed_feedback.raw_input := u_3405_speed_feedback_raw_input;


//---Valves----------------------------------------------------------------------------------------------------------------------------------------------

//Instantiate av_3148 analog input function block----------------------------------------------------------------------------
av_3148_position_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
av_3148_position_feedback.eu_max:=opc.popa_0081_av_3148_position_feedback_eu_max;
av_3148_position_feedback.eu_min:=opc.popa_0081_av_3148_position_feedback_eu_min;
av_3148_position_feedback.filter_factor:=opc.popa_0081_av_3148_position_feedback_filter_factor;
av_3148_position_feedback.raw_max:=opc.popa_0081_av_3148_position_feedback_raw_max;
av_3148_position_feedback.raw_min:=opc.popa_0081_av_3148_position_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
av_3148_position_feedback.raw_input := av_3148_position_feedback_raw_input;

//Instantiate av_3148 analog output function block
av_3148_position_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
av_3148_position_command.eu_max:=opc.popa_0081_av_3148_position_command_eu_max;
av_3148_position_command.eu_min:=opc.popa_0081_av_3148_position_command_eu_min;
av_3148_position_command.filter_factor:=opc.popa_0081_av_3148_position_command_filter_factor;
av_3148_position_command.raw_max:=opc.popa_0081_av_3148_position_command_raw_max;
av_3148_position_command.raw_min:=opc.popa_0081_av_3148_position_command_raw_min;
//Map output from valve control pou to scaling block
av_3148_position_command.raw_input:=valve_analog_control_st.av_3148.Position_Command;
//Map the analog scaling function block raw input to the physical raw output variable
av_3148_position_command_io := REAL_TO_INT(av_3148_position_command.scaled_value);


//Instantiate av_3248 analog input function block-----------------------------------------------------------------
av_3248_position_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
av_3248_position_feedback.eu_max:=opc.popa_0081_av_3248_position_feedback_eu_max;
av_3248_position_feedback.eu_min:=opc.popa_0081_av_3248_position_feedback_eu_min;
av_3248_position_feedback.filter_factor:=opc.popa_0081_av_3248_position_feedback_filter_factor;
av_3248_position_feedback.raw_max:=opc.popa_0081_av_3248_position_feedback_raw_max;
av_3248_position_feedback.raw_min:=opc.popa_0081_av_3248_position_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
av_3148_position_feedback.raw_input := av_3148_position_feedback_raw_input;

//Instantiate av_3148 analog output function block
av_3148_position_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
av_3148_position_command.eu_max:=opc.popa_0081_av_3148_position_command_eu_max;
av_3148_position_command.eu_min:=opc.popa_0081_av_3148_position_command_eu_min;
av_3148_position_command.filter_factor:=opc.popa_0081_av_3148_position_command_filter_factor;
av_3148_position_command.raw_max:=opc.popa_0081_av_3148_position_command_raw_max;
av_3148_position_command.raw_min:=opc.popa_0081_av_3148_position_command_raw_min;
//Map output from valve control pou to scaling block
av_3148_position_command.raw_input:=valve_analog_control_st.av_3148.Position_Command;
//Map the analog scaling function block raw input to the physical raw output variable
av_3148_position_command_io := REAL_TO_INT(av_3148_position_command.scaled_value);


//Instantiate av_3148 analog input function block----------------------------------------------------------------------
av_3148_position_feedback();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
av_3148_position_feedback.eu_max:=opc.popa_0081_av_3148_position_feedback_eu_max;
av_3148_position_feedback.eu_min:=opc.popa_0081_av_3148_position_feedback_eu_min;
av_3148_position_feedback.filter_factor:=opc.popa_0081_av_3148_position_feedback_filter_factor;
av_3148_position_feedback.raw_max:=opc.popa_0081_av_3148_position_feedback_raw_max;
av_3148_position_feedback.raw_min:=opc.popa_0081_av_3148_position_feedback_raw_min;
//Map the analog scaling function block raw input to the physical raw input variable
av_3148_position_feedback.raw_input := av_3148_position_feedback_raw_input;

//Instantiate av_3148 analog output function block
av_3148_position_command();
//Map values from the OPC GVL so that they can be written to from outside POU(IE from HMI)
av_3148_position_command.eu_max:=opc.popa_0081_av_3148_position_command_eu_max;
av_3148_position_command.eu_min:=opc.popa_0081_av_3148_position_command_eu_min;
av_3148_position_command.filter_factor:=opc.popa_0081_av_3148_position_command_filter_factor;
av_3148_position_command.raw_max:=opc.popa_0081_av_3148_position_command_raw_max;
av_3148_position_command.raw_min:=opc.popa_0081_av_3148_position_command_raw_min;
//Map output from valve control pou to scaling block
av_3148_position_command.raw_input:=valve_analog_control_st.av_3148.Position_Command;
//Map the analog scaling function block raw input to the physical raw output variable
av_3148_position_command_io := REAL_TO_INT(av_3148_position_command.scaled_value);


//Map the digital valve open command to the command output
nv_3110_open_command_io:=valve_digital_control_st.nv_3110.open_command;
nv_3210_open_command_io:=valve_digital_control_st.nv_3210.open_command;
nv_3310_open_command_io:=valve_digital_control_st.nv_3310.open_command;
nv_3135_open_command_io:=valve_digital_control_st.nv_3135.open_command;
nv_3235_open_command_io:=valve_digital_control_st.nv_3235.open_command;
nv_3335_open_command_io:=valve_digital_control_st.nv_3335.open_command;
nv_3372_open_command_io:=valve_digital_control_st.nv_3372.open_command;
nv_3162_open_command_io:=valve_digital_control_st.nv_3162.open_command;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>